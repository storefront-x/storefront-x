name: Cypress

on:
  workflow_call:
    inputs:
      storefront-x-config:
        required: true
        type: string
      number-of-tests-per-run:
        default: 3
        type: number
      target-directory:
        default: cypress/e2e
        type: string

jobs:
  # This job will cache yarn dependencies when they already not exist in cache. If exists, it will restore them
  # without having to install them in each job (which takes a lot of time)
  # They are stored by hash of the yarn.lock file, so they will be invalidated if the dependencies themselves change
  yarn:
    runs-on: ubuntu-latest
    name: yarn install
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Restore node_modules from cache
        id: cache-nodemodules
        uses: actions/cache/restore@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: yarn install --immutable --immutable-cache
      - name: Save node_modules to cache
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

  setup:
    runs-on: ubuntu-latest
    name: setup
    needs: [yarn]
    outputs:
      # will contain a json string with an array of n elements, each being a string of spec files delimited by ,
      test-chunks: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
      # json string with ids to use in the next job matrix depending on how many elements are in the above array, eg: [0,1]
      test-chunk-ids: ${{ steps['set-test-chunk-ids'].outputs['test-chunk-ids'] }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
        name: Build app
      - name: Restore cached node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - run: yarn build --config ${{inputs.storefront-x-config}} --onlyBootstrap
      - id: set-test-chunks
        name: Set Chunks
        # get all spec files from the target-directory directory, group them to be at most number-of-tests-per-run (xargs -n...) at a time and transform them to json
        run: echo "test-chunks=$(find ${{inputs.target-directory}} -type f -name "*.js" | xargs -n${{inputs.number-of-tests-per-run}} | tr ' ' ',' | jq -R . | jq -s -cM .)" >> $GITHUB_OUTPUT
      - id: set-test-chunk-ids
        name: Set Chunk IDs
        # get the number of elements from the above array as an array of indexes
        run: echo "test-chunk-ids=$(echo '${{ steps['set-test-chunks'].outputs['test-chunks'] }}' | jq -cM 'to_entries | map(.key)')" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: [setup, yarn]
    strategy:
      fail-fast: false
      matrix:
        chunk: ${{fromJSON(needs.setup.outputs['test-chunk-ids'])}}
    name: chunk ${{ matrix.chunk }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Restore cached node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      - run: yarn build --config ${{inputs.storefront-x-config}}
      - run: yarn serve &
      - run: yarn cypress run --browser chrome --spec $(echo '${{ needs.setup.outputs['test-chunks'] }}' | jq -cMr '.[${{ matrix.chunk }}] | @text')
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: cypress/videos
