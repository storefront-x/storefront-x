import { GeneratingConcept } from '@storefront-x/core'
import path from 'node:path'

export default class BusEmitters extends GeneratingConcept {
  async execute(files) {
    const records = {}

    for (const { module, file } of Object.values(files)) {
      const filewithoutExt = file.replace(/\.\w+$/, '').replace(/\\/g, '')

      const record = {
        ident: filewithoutExt,
        importName: filewithoutExt.replace(/[^A-Za-z0-9]/g, ''),
        path: this.getPathForFile(module, file),
      }

      records[record.ident] = record

      for (const record of Object.keys(records)) {
        await this.renderTemplate(
          this.compiledTemplate,
          { record: records[record] },
          { file: 'useEmit' + records[record].ident + '.' + this.extension },
        )
      }
    }
  }

  get directory() {
    return 'bus/events'
  }

  get generateMultipleFiles() {
    return true
  }

  dst() {
    return path.join(this.core.buildDir, 'bus/emitters')
  }

  get template() {
    return `// generated by Storefront X
import <%= record.importName %> from '#ioc/bus/events/<%= record.importName %>'
import listen<%= record.importName %> from '~/.sfx/bus/listeners/listen<%= record.importName %>'

export default () => {
  return (event: <%= record.importName %>) => {
    for (const listener of listen<%= record.importName %>) {
      listener(event)
    }
  }
}
    `
  }
}
