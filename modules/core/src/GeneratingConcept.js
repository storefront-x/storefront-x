//@ts-check

import path from 'path'
import fs from 'node:fs/promises'
import ejs from 'ejs'
import ExtendingConcept from './ExtendingConcept.js'

/**
 * @typedef {import('@storefront-x/core').Core} Core
 * @typedef {import('@storefront-x/core').Module} Module
 * @typedef {{module: Module, file: string}} Extension
 */

export default class GeneratingConcept extends ExtendingConcept {
  /**
   * @param {Core} core
   */
  constructor(core) {
    super(core)

    this.compiledTemplate = this.compileTemplate(this.template)
  }

  async before() {
    await fs.mkdir(this.dst(), { recursive: true })
  }

  /**
   * @param {Record<string, {module: Module, filePath: string, file: string, extensions:Extension[]}>} files
   */
  async execute(files) {
    /** @type {Record<string, any>} */
    const records = {}
    /** @type {Record<string, any>} */
    const recordsClient = {}
    /** @type {Record<string, any>} */
    const recordsServer = {}

    if (this.removesDestinationDirectory) {
      await this.purgeDst()
    }

    for (const { file, filePath, extensions } of Object.values(files)) {
      const filewithoutExt = file.replace(/\.\w+$/, '').replace(/\\/g, '')

      const record = {
        ident: filewithoutExt,
        importName: filewithoutExt.replace(/[^A-Za-z0-9]/g, ''),
        extensions,
        filePath,
      }

      if (this.supportsClientServer) {
        if (filewithoutExt.endsWith('.client')) {
          recordsClient[record.ident] = record
        } else if (filewithoutExt.endsWith('.server')) {
          recordsServer[record.ident] = record
        } else {
          recordsClient[record.ident] = record
          recordsServer[record.ident] = record
        }
      } else {
        records[record.ident] = record
      }
    }

    if (this.supportsClientServer) {
      await this.renderTemplate(
        this.compiledTemplate,
        { records: recordsClient },
        { file: path.basename(this.directory) + '.client.ts' },
      )
      await this.renderTemplate(
        this.compiledTemplate,
        { records: recordsServer },
        { file: path.basename(this.directory) + '.server.ts' },
      )
    } else {
      if (this.generateMultipleFiles) {
        for (const record of Object.keys(records)) {
          await this.renderTemplate(
            this.compiledTemplate,
            { record: records[record] },
            { file: records[record].ident + '.' + this.extension },
          )
        }
      } else {
        await this.renderTemplate(this.compiledTemplate, { records })
      }
    }
  }

  /**
   * @param {(data: any) => string} template
   * @param {any} data
   * @param { {file?: string } } opts
   * @returns {Promise<void>}
   */
  async renderTemplate(template, data, { file } = {}) {
    const rendered = template(data)

    await this.writeFile(path.join(this.dst(), file ?? this.fileName), rendered)
  }

  /**
   * @param {string} source
   */
  compileTemplate(source) {
    return ejs.compile(source)
  }

  get template() {
    let content = `// generated by Storefront X\n`
    if (this.generateMultipleFiles) {
      content += `
<%_ if (record.extensions.length === 0) { _%>
export ${this.exportAll ? '* as default' : '{default}'} from '<%= record.filePath %>'\n
<%_ } else { _%>
import self from '<%= record.filePath %>'
<%_ for (const [ident, extension] of Object.entries(record.extensions)) { _%>
import ext<%= ident %> from '<%= extension.filePath %>'\n
<%_ } _%>
export default <% for (let i = record.extensions.length - 1; i >= 0; i--) { _%>ext<%= i %>(<%_ } _%>self<%_ for (let i = record.extensions.length - 1; i >= 0; i--) { _%>)<%_ } _%>
<%_ } _%>
`
    } else {
      const fileImport = this.exportAll ? '* as <%= record.importName %>' : '<%= record.importName %>'
      content += `
<%_ for (const [recordIdent, record] of Object.entries(records)) { _%>
<%_ if (record.extensions.length === 0) { _%>
import ${fileImport} from '<%= record.filePath %>'
<%_ } else { _%>
import self_<%= recordIdent %> from '<%= record.filePath %>'
<%_ for (const [extIdent, extension] of Object.entries(record.extensions)) { _%>
import ext_<%= recordIdent %>_<%= extIdent %> from '<%= extension.filePath %>'
<%_ } _%>
<%_ } _%>
<%_ } _%>

export default {
<%_ for (const [recordIdent, record] of Object.entries(records)) { _%>
<%_ if (record.extensions.length === 0) { _%>
  '<%= recordIdent %>': <%= record.importName %>,
<%_ } else { _%>
  '<%= recordIdent %>': <% for (let i = record.extensions.length - 1; i >= 0; i--) { _%>ext_<%= recordIdent %>_<%= i %>(<%_ } _%>self_<%= recordIdent %><%_ for (let i = record.extensions.length - 1; i >= 0; i--) { _%>)<%_ } _%>,
<%_ } _%>
<%_ } _%>
}
`
    }
    return content
  }

  get exportAll() {
    return false
  }

  get supportsClientServer() {
    return false
  }

  get extension() {
    return 'ts'
  }

  get fileName() {
    return `${path.basename(this.directory)}.${this.extension}`
  }

  get generateMultipleFiles() {
    return false
  }

  dst() {
    if (this.generateMultipleFiles) {
      return path.join(this.core.buildDir, path.dirname(this.directory), path.basename(this.directory))
    } else {
      return super.dst()
    }
  }
}
