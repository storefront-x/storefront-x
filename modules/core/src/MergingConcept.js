//@ts-check

import path from 'path'
import fs from 'node:fs/promises'
import ejs from 'ejs'
import WatchingConcept from './WatchingConcept.js'

/**
 * @typedef {import('@storefront-x/core').Core} Core
 * @typedef {import('@storefront-x/core').Module} Module
 */

export default class MergingConcept extends WatchingConcept {
  /**
   * @param {Core} core
   */
  constructor(core) {
    super(core)

    this.compiledTemplate = this.compileTemplate(this.template)
  }

  async before() {
    await fs.mkdir(this.dst(), { recursive: true })
  }

  /**
   * @returns {Record<string, {module: Module, file: string}>}
   */
  processFiles() {
    /** @type {Record<string, {module: Module, file: string}>} */
    const files = {}

    for (const mod of this._mods) {
      for (const file of mod.files) {
        files[`${file}_${mod.module.name}`] = {
          module: mod.module,
          file,
        }
      }
    }

    return files
  }

  /**
   * @param {Record<string, {module: Module, file: string}>} files
   */
  async execute(files) {
    /** @type {Record<string, any>} */
    const records = {}

    let id = 0
    for (const { module, file } of Object.values(files)) {
      const filewithoutExt = file.replace(/\.\w+$/, '').replace(/\\/g, '')

      const record = {
        ident: filewithoutExt,
        importName: 'module' + id,
        path: this.getPathForFile(module, file),
      }

      if (!records[record.ident]) {
        records[record.ident] = [record]
      } else {
        records[record.ident].push(record)
      }

      id++
    }

    await this.renderTemplate(this.compiledTemplate, { records })
  }

  /**
   * @param {(data: any) => string} template
   * @param {any} data
   * @param { {file?: string } } opts
   * @returns {Promise<void>}
   */
  async renderTemplate(template, data, { file } = {}) {
    const rendered = template(data)

    await this.writeFile(path.join(this.dst(), file ?? `${path.basename(this.directory)}.${this.extension}`), rendered)
  }

  /**
   * @param {string} source
   */
  compileTemplate(source) {
    return ejs.compile(source)
  }

  get template() {
    return `// generated by Storefront X
<%_ for (const group of Object.values(records)) { _%>
<%_ for (const item of group) { _%>
import <%= item.importName %> from '<%= item.path %>'
<%_ } _%>
<%_ } _%>

const obj: Record<string, any> = {}

<%_ for (const [ident, group] of Object.entries(records)) { _%>
obj['<%= ident %>'] = {}
<%_ for (const item of group) { _%>
Object.assign(obj['<%= ident %>'], <%= item.importName %>)
<%_ } _%>

<%_ } _%>
export default obj
`
  }

  get extension() {
    return 'ts'
  }
}
