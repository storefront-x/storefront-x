import { GeneratingConcept, Build } from '@storefront-x/core'
import path from 'node:path'

export default class BusEmitters extends GeneratingConcept {
  async getDependentFiles(dependentConcept) {
    const concept = this.core.concepts.find((c) => c.directory === dependentConcept)
    const files = new Set()

    for (const module of this.core.modules) {
      try {
        const fileNames = await concept.getFiles(concept.src(module))

        for (const name of fileNames) {
          files.add(name)
        }
      } catch (e) {
        // Do nothing
      }
    }

    return files
  }

  async execute(files) {
    const dependentFiles = await this.getDependentFiles('bus/listeners')
    const records = {}

    for (const { module, file } of Object.values(files)) {
      const filewithoutExt = file.replace(/\.\w+$/, '').replace(/\\/g, '')

      const record = {
        ident: filewithoutExt,
        importName: filewithoutExt.replace(/[^A-Za-z0-9]/g, ''),
        path: this.getPathForFile(module, file),
        dependentFiles: [...dependentFiles].filter((f) => f.includes(filewithoutExt)),
      }

      records[record.ident] = record

      for (const record of Object.keys(records)) {
        await this.renderTemplate(
          this.compiledTemplate,
          { record: records[record], dependentFiles: records[record].dependentFiles },
          { file: 'useEmit' + records[record].ident + '.' + this.extension },
        )
      }
    }

    // console.log(await this.getFiles('/Users/damiandlugosch/Sites/magexo/storefront-x/modules/'))
  }

  get directory() {
    return 'bus/events'
  }

  get generateMultipleFiles() {
    return true
  }

  dst() {
    return path.join(this.core.buildDir, 'ioc/bus/emitters')
  }

  get template() {
    const template = `import <%= record.importName %> from '#ioc/bus/events/<%= record.importName %>'

const useListen<%= record.importName %> = import.meta.glob('~/.sfx/bus/listeners/useListen<%= record.importName %>', { eager: true })

export default () => {
  const listen<%= record.importName %> = Object.values(useListen<%= record.importName %>).map(({ default: use }) => use()).pop() ?? []

  return (event: <%= record.importName %>) => {
    for (const listener of listen<%= record.importName %>) {
      listener(event)
    }
  }
}
    `
    if (this.core instanceof Build) {
      return `// generated by Storefront X
<%_ if (dependentFiles.length === 0) { _%>
export default () => () => undefined
<%_ } else { _%>
${template}
<%_ } _%>
      `
    } else {
      return `// generated by Storefront X
${template}
      `
    }
  }
}
