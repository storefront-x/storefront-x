import path from 'node:path'
import { GeneratingConcept, Build } from '@storefront-x/core'
import BusListeners from './BusListeners.js'

export default class BusEmitters extends GeneratingConcept {
  async execute(files) {
    const records = {}
    const listeners = await this.getConceptFiles(BusListeners)

    for (const { module, file } of Object.values(files)) {
      const filewithoutExt = file.replace(/\.\w+$/, '').replace(/\\/g, '')

      const record = {
        ident: filewithoutExt,
        importName: filewithoutExt.replace(/[^A-Za-z0-9]/g, ''),
        path: this.getPathForFile(module, file),
        listeners: listeners.filter((f) => f.includes(filewithoutExt)),
      }

      records[record.ident] = record

      for (const record of Object.keys(records)) {
        await this.renderTemplate(
          this.compiledTemplate,
          { record: records[record] },
          { file: 'useEmit' + records[record].ident + '.' + this.extension },
        )
      }
    }
  }

  async getConceptFiles() {
    if (!(this.core instanceof Build)) return []

    const concept = this.core.concepts['BusListeners.js']
    const files = new Set()

    for (const module of this.core.modules) {
      try {
        const fileNames = await concept.getFiles(concept.src(module))
        fileNames.forEach((name) => files.add(name))
      } catch (e) {
        // Do nothing
      }
    }

    return Array.from(files)
  }

  get directory() {
    return 'bus/events'
  }

  get generateMultipleFiles() {
    return true
  }

  dst() {
    return path.join(this.core.buildDir, 'ioc/bus/emitters')
  }

  get template() {
    const template = `import <%= record.importName %> from '#ioc/bus/events/<%= record.importName %>'

const useListen<%= record.importName %> = import.meta.glob('~/.sfx/bus/listeners/useListen<%= record.importName %>', { eager: true })

export default () => {
  const listen<%= record.importName %> = Object.values(useListen<%= record.importName %>).flatMap(({ default: use }: any) => use())

  return (event: <%= record.importName %>) => {
    for (const listener of listen<%= record.importName %>) {
      listener(event)
    }
  }
}`

    if (this.core instanceof Build) {
      return `// generated by Storefront X
<%_ if (record.listeners.length === 0) { _%>
export default () => () => undefined
<%_ } else { _%>
${template}
<%_ } _%>
`
    } else {
      return `// generated by Storefront X
${template}
`
    }
  }
}
